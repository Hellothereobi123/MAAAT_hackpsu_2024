{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tharu\\\\MAAAT_hackpsu_2024\\\\disaster_frontend\\\\src\\\\Back_end.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\n//const axios = require('axios');\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormData = require('form-data');\nconst fs = require('fs');\nlet data = new FormData();\ndata.append('file', fs.createReadStream('/Users/anishsparida/Downloads/us_data.csv'));\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: 'http://68.183.107.61:3002/api/data',\n  headers: {\n    ...data.getHeaders()\n  },\n  data: data\n};\n\n//const fs = require('fs');\n\nconst DataDisplay = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState('');\n\n  // Function to fetch data from the API\n  const fetchData = async () => {\n    axios.request(config).then(response => {\n      console.log(JSON.stringify(response.data));\n    }).catch(error => {\n      console.log(error);\n    });\n    // try {\n    //     // Make sure to use the correct URL to your Flask API\n    //     const response = await axios.post('http://68.183.107.61:3002/api/data');\n    //     setData(response.data); // Assuming response.data is the JSON you want\n    //     setError(''); // Clear any previous errors\n    // } catch (err) {\n    //     setError('Error fetching data: ' + err.message);\n    // }\n  };\n\n  // Removed useEffect that automatically fetches data on mount\n\n  // Function to handle button click\n  const handleButtonClick = () => {\n    fetchData(); // Call the fetchData function when the button is clicked\n  };\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      color: 'red'\n    },\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data Display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), \" \", data ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this) // This will display your data\n    : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data loaded. Click the button to fetch data.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this) // Message when no data is loaded\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(DataDisplay, \"q9tpO12PPVm5glkCcMhiRMcATgg=\");\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","FormData","require","fs","data","append","createReadStream","config","method","maxBodyLength","Infinity","url","headers","getHeaders","DataDisplay","_s","setData","error","setError","fetchData","request","then","response","console","log","JSON","stringify","catch","handleButtonClick","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/tharu/MAAAT_hackpsu_2024/disaster_frontend/src/Back_end.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n//const axios = require('axios');\r\nconst FormData = require('form-data');\r\nconst fs = require('fs');\r\nlet data = new FormData();\r\ndata.append('file', fs.createReadStream('/Users/anishsparida/Downloads/us_data.csv'));\r\n\r\nlet config = {\r\n method: 'post',\r\n maxBodyLength: Infinity,\r\n url: 'http://68.183.107.61:3002/api/data',\r\n headers: { \r\n   ...data.getHeaders()\r\n },\r\n data : data\r\n};\r\n\r\n\r\n//const fs = require('fs');\r\n\r\nconst DataDisplay = () => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState('');\r\n\r\n    // Function to fetch data from the API\r\n    const fetchData = async () => {\r\n        axios.request(config)\r\n        .then((response) => {\r\n        console.log(JSON.stringify(response.data));\r\n        })\r\n        .catch((error) => {\r\n        console.log(error);\r\n        });\r\n        // try {\r\n        //     // Make sure to use the correct URL to your Flask API\r\n        //     const response = await axios.post('http://68.183.107.61:3002/api/data');\r\n        //     setData(response.data); // Assuming response.data is the JSON you want\r\n        //     setError(''); // Clear any previous errors\r\n        // } catch (err) {\r\n        //     setError('Error fetching data: ' + err.message);\r\n        // }\r\n    };\r\n\r\n    // Removed useEffect that automatically fetches data on mount\r\n\r\n    // Function to handle button click\r\n    const handleButtonClick = () => {\r\n        fetchData(); // Call the fetchData function when the button is clicked\r\n    };\r\n\r\n    if (error) return <p style={{ color: 'red' }}>{error}</p>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Data Display</h1>\r\n            <button onClick={handleButtonClick}>Fetch Data</button> {/* Button to fetch data */}\r\n            {data ? (\r\n                <pre>{JSON.stringify(data, null, 2)}</pre> // This will display your data\r\n            ) : (\r\n                <p>No data loaded. Click the button to fetch data.</p> // Message when no data is loaded\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataDisplay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,IAAIE,IAAI,GAAG,IAAIH,QAAQ,CAAC,CAAC;AACzBG,IAAI,CAACC,MAAM,CAAC,MAAM,EAAEF,EAAE,CAACG,gBAAgB,CAAC,2CAA2C,CAAC,CAAC;AAErF,IAAIC,MAAM,GAAG;EACZC,MAAM,EAAE,MAAM;EACdC,aAAa,EAAEC,QAAQ;EACvBC,GAAG,EAAE,oCAAoC;EACzCC,OAAO,EAAE;IACP,GAAGR,IAAI,CAACS,UAAU,CAAC;EACrB,CAAC;EACDT,IAAI,EAAGA;AACR,CAAC;;AAGD;;AAEA,MAAMU,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACX,IAAI,EAAEY,OAAO,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMsB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1BrB,KAAK,CAACsB,OAAO,CAACb,MAAM,CAAC,CACpBc,IAAI,CAAEC,QAAQ,IAAK;MACpBC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAClB,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC,CACDuB,KAAK,CAAEV,KAAK,IAAK;MAClBM,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;IAClB,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EAED;;EAEA;EACA,MAAMW,iBAAiB,GAAGA,CAAA,KAAM;IAC5BT,SAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,IAAIF,KAAK,EAAE,oBAAOjB,OAAA;IAAG6B,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAE;IAAAC,QAAA,EAAEd;EAAK;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAEzD,oBACInC,OAAA;IAAA+B,QAAA,gBACI/B,OAAA;MAAA+B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBnC,OAAA;MAAQoC,OAAO,EAAER,iBAAkB;MAAAG,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAAC,EACvD/B,IAAI,gBACDJ,OAAA;MAAA+B,QAAA,EAAMN,IAAI,CAACC,SAAS,CAACtB,IAAI,EAAE,IAAI,EAAE,CAAC;IAAC;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,CAAC;IAAA,eAE3CnC,OAAA;MAAA+B,QAAA,EAAG;IAA+C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC;IAC1D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACpB,EAAA,CA3CID,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AA6CjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}